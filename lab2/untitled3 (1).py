# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CY-E6JWSohnuH0TOc2I972RSCTBktVmW
"""

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image  # Import the PIL library

def load_image_into_numpy_array(image_path):
    """Loads an image from a path and returns it as a NumPy array."""
    try:
        img = Image.open(image_path)  #Open the image using PIL
        return np.array(img)  # Convert the image to a NumPy array
    except FileNotFoundError:
        print(f"Error: Image file '{image_path}' not found.")
        return None
    except Exception as e:
        print(f"Error loading image: {e}")
        return None

# Replace 'your_image.jpg' with the actual path to your image
image_path = 'images.jpg'
img_array = load_image_into_numpy_array(image_path)

if img_array is None:
    print("Exiting due to image loading error.")
else:
    print(f"Image shape: {img_array.shape}")
# Display the original image
plt.imshow(img_array)
plt.title('Original Image')
plt.axis('off')  # Hide axis ticks and labels
plt.show()
# Rotate the image by 90 degrees
rotated_img = np.rot90(img_array)

# Flip the image horizontally
flipped_img = np.fliplr(img_array)

# Display the rotated image
plt.imshow(rotated_img)
plt.title('Rotated Image (90 degrees)')
plt.axis('off')
plt.show()

# Display the flipped image
plt.imshow(flipped_img)
plt.title('Flipped Image (Horizontally)')
plt.axis('off')
plt.show()
# Apply grayscale conversion
def convert_to_grayscale(img_array):
    """Converts a NumPy image array to grayscale."""
    # Grayscale conversion formula: Y = 0.299*R + 0.587*G + 0.114*B
    return np.dot(img_array[..., :3], [0.299, 0.587, 0.114])

gray_img = convert_to_grayscale(img_array)

# Display the grayscale image
plt.imshow(gray_img, cmap='gray')  # Use cmap='gray' for grayscale images
plt.title('Grayscale Image')
plt.axis('off')
plt.show()

from sklearn.datasets import load_iris
import numpy as np
import matplotlib.pyplot as plt

# 1. Load the Iris dataset
iris = load_iris()
X = np.array(iris.data)
Y = np.array(iris.target)
feature_names = iris.feature_names

# 2. NumPy Analysis: Calculate Statistics
means = np.mean(X, axis=0)
medians = np.median(X, axis=0)
std_devs = np.std(X, axis=0)
mins = np.min(X, axis=0)
maxs = np.max(X, axis=0)

print("Descriptive Statistics for Iris Dataset:")
for i in range(X.shape[1]):
    print(f"\nFeature: {feature_names[i]}")
    print(f"  Mean: {means[i]:.2f}")
    print(f"  Median: {medians[i]:.2f}")
    print(f"  Standard Deviation: {std_devs[i]:.2f}")
    print(f"  Minimum: {mins[i]:.2f}")
    print(f"  Maximum: {maxs[i]:.2f}")
    print("-" * 30)

# 3. NumPy: Extract Sepal Length and Sepal Width
sepal_data = X[:, :2]
print("\nSepal Length and Sepal Width data:\n", sepal_data)

# 4. Matplotlib: Scatter Plot of Sepal Length vs. Sepal Width
plt.figure(figsize=(8, 6))
scatter = plt.scatter(sepal_data[:, 0], sepal_data[:, 1], c=Y, cmap='viridis')
plt.xlabel(feature_names[0])
plt.ylabel(feature_names[1])
plt.title('Scatter Plot of Sepal Length vs Sepal Width')

# Add a legend to identify the species
legend1 = plt.legend(*scatter.legend_elements(), title="Species")
plt.gca().add_artist(legend1)

plt.grid(True)
plt.show()

# 5. Matplotlib: Histogram of Sepal Length
plt.figure(figsize=(8, 6))
plt.hist(sepal_data[:, 0], bins=20, color='skyblue', edgecolor='black')
plt.xlabel(feature_names[0])
plt.ylabel('Frequency')
plt.title('Histogram of Sepal Length')
plt.grid(True)
plt.show()

# 6. Matplotlib: Line Plot of Petal Length vs. Petal Width
petal_length = X[:, 2]
petal_width = X[:, 3]

# Sort the data by petal length for a more meaningful line plot
sorted_indices = np.argsort(petal_length)
petal_length_sorted = petal_length[sorted_indices]
petal_width_sorted = petal_width[sorted_indices]

plt.figure(figsize=(8, 6))
plt.plot(petal_length_sorted, petal_width_sorted, marker='o', linestyle='-', color='green')
plt.xlabel(feature_names[2])
plt.ylabel(feature_names[3])
plt.title('Line Plot of Petal Length vs Petal Width')
plt.grid(True)
plt.show()